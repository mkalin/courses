     1	HTTP: Quick and Dirty Overview
     2	
     3	-- a "stateless" protocol with two message types, requests and responses
     4	   ** The protocol is stateless in that it does not specify the coordination
     5	      of requests and responses. Accordingly, applications such as Web servers
     6	      must maintain state information to coordinate requests and responses.
     7	
     8	-- a request goes from a client (typically, a browser) to a Web server 
     9	
    10	-- a response goes from a server to a client
    11	
    12	-- the format is essentially the same for both
    13	
    14	      start-line
    15	      optional header (the header is a hash, i.e., collection of key/value pairs)
    16	      CRLF
    17	      CRLF
    18	      optional body 
    19	;;;;;;;;;;;;;;;;;;;;;;;;
    20	
    21	Request in more detail:
    22	
    23	start-line:       <method> <request-URL> <version>
    24	optional header:  <key:value pairs>
    25	CRLF
    26	CRLF
    27	optional body:    <entity body>
    28	;;;;;;;
    29	
    30	Sample Request                           
    31	
    32	GET /my_dir/doc.htm HTTP/1.1             
    33	Accept: text/*                           
    34	Host: www.foobar.org                     
    35	
    36	
    37	
    38	Sample Response:
    39	
    40	HTTP/1.1 200 OK
    41	Context-type: text/plain
    42	Content-length: 17
    43	
    44	Hi! Hello, world!
    45	
    46	//****************************************************************
    47	
    48	An HTTP request is typically generated by a Web browser at the bidding of a 
    49	human. The request's start-line specifies the HTTP "method," the most common
    50	of which are:
    51	
    52	           GET, HEAD, POST, PUT, TRACE, OPTIONS, DELETE
    53	
    54	The method names are not case sensitive. If a user requests a "static document"
    55	such as my homepage (index.html), the browser typically generates a GET 
    56	request. If a user submits, say, an HTML order form to an on-line shop such
    57	as Amazon, the browser typically generates a POST request.
    58	
    59	A Web server typically generates a response to a request from a Web browser, using
    60	a status code to indicate some information about the request. The codes are 
    61	integers with semantics on the ranges:
    62	
    63	100-199: Informational
    64	200-299: OK
    65	300-399: Redirection
    66	400-499: Client error
    67	500-599: Server error
    68	
    69	//***************************************************************
    70	
    71	GET and POST requests are often used equivalently, as each type allows information
    72	to be sent within the request.(Today, however, Web architects are pushing for a 
    73	return to the more disciplined use of GET and POST.) In any case, a GET request 
    74	has no HTTP body; hence, information must be sent in the HTTP header as a 
    75	"query string," in effect a hash. Here's a sample GET request with a query string:
    76	
    77	    http://foo.bar.org/check-horseracingbets.cgi?horse=badbaz&jockey=fred
    78	
    79	In this example, the request is for the "server-side script" called
    80	check-horseracingbets rather than for a static HTML document. The Web server
    81	passes the query string to the script. Note that the query string, which
    82	begins with "?", consists of key/value pairs such as "horse=badbaz". The
    83	same information could be passed in a POST request, whose body would be the
    84	HTTP form that represents these key/value pairs. Most modern scripting languages
    85	make transparent the distinction between GET and POST requests.
    86	
    87	//********************************************************************
    88	
    89	
    90	
    91	
    92	
    93	
    94	
    95	
    96	
    97	
    98	What follows is a sample command-line session in which 
    99	
   100	   -- I first use the TELNET utility to connect to a Web server on
   101	      a remote machine (condor.depaul.edu, DPU's faculty machine)
   102	
   103	   -- I then issue an HTTP GET request for my homepage
   104	
   105	   -- The HTTP response is the HTML document that is my homepage
   106	
   107	   -- The commands I issue are not indented. For readability,
   108	      the responses I get back are indented. Above the commands I've
   109	      added comments, which are not part of the commands.
   110	
   111	
   112	
   113	
   114	
   115	
   116	
   117	
   118	
   119	
   120	
   121	
   122	//*** Use telnet utility to open a connection to
   123	//    machine condor on port 80
   124	telnet condor.depaul.edu 80     
   125	   
   126	   Trying 140.192.1.6...
   127	   Connected to condor.depaul.edu.
   128	   Escape character is '^]'.
   129	
   130	//*** Enter a GET request followed by two CRLFs to terminate the request
   131	GET /~mkalin/index.html HTTP/1.1
   132	host: condor.depaul.edu
   133	
   134	//*** Response header, two CRLFs, response body (my index.html)
   135	HTTP/1.1 200 OK
   136	Date: Mon, 16 Jul 2007 03:18:34 GMT
   137	Server: Apache/2.0.39 (Unix) PHP/4.2.1
   138	Last-Modified: Tue, 02 Sep 2006 20:30:06 GMT
   139	ETag: "c9c5-321-9dc08f80"
   140	Accept-Ranges: bytes
   141	Content-Length: 801
   142	Content-Type: text/html; charset=ISO-8859-1
   143	X-Pad: avoid browser bug
   144	
   145	<title>Course Listings</title>
   146	<head><title>Textbook and Course Listings</title></head>
   147	<p><hr>
   148	<h2>WWW Pages for Textbooks</h2>
   149	<h3>
   150	<body>
   151	<p>
   152	<ul>
   153	<li><a HREF="ed3/">Applications Programming in ANSI C (3rd edition)</a><p>
   154	<li><a HREF="cse/">C for Scientists and Engineers</a><p>
   155	<li><a HREF="apc/">Applications Programming in C++</a><p>
   156	<li><a HREF="oop2/">Object-Oriented Programming in C++ (2nd edition)</a><p>
   157	<li><a HREF="oopj/">Object-Oriented Programming in Java</a><p>
   158	</h3>
   159	</ul>
   160	<p><hr>
   161	<h2>Graph Generation Program
   162	<h3>
   163	<ul>
   164	<li><a href="http://condor.depaul.edu/~rjohnson/source/graph_ge.c">graph_ge.c</a>
   165	</ul>
   166	<p><hr>
   167	...
