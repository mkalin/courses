     1	## More miscellany
     2	
     3	# IA-32 Addressing Modes
     4	
     5	Mode name              Example                          Meaning
     6	
     7	Global Symbol     movl x, %eax                    value of x into %eax
     8	(Direct)
     9	
    10	Immediate	  movl $56, %eax                  56 into %eax
    11	
    12	Register	  movl %ebx, %eax                 contents of %ebx into %eax
    13	Direct
    14	
    15	Register 
    16	Indirect	  movl (%esp), %eax               stack[%esp] into %eax
    17	
    18	Base-Relative	  movl -4(%ebp), %eax             stack[%ebp - 4] into %eax
    19	
    20	Offset-Scaled-    movl -12(%esi, %ebx, 4), %eax   stack[-12 + %esi + %ebx * 4] into 
    21	Base-Relative                                       %eax
    22	
    23	
    24	# Good, bad, and ugly C
    25	/* Options for passing arrays to functions, illustrated
    26	   with three implementations of a to_string function. */
    27	
    28	#include <stdio.h>
    29	#include <string.h>
    30	#include <stdlib.h>
    31	
    32	#define MaxName    (60)
    33	#define MaxString (250)
    34	
    35	typedef unsigned int bool;
    36	enum truth_values {false, true}; 
    37	
    38	typedef struct Emp {
    39	  unsigned char lname[MaxName + 1]; /* + 1 for '\0' */
    40	  unsigned char fname[MaxName + 1];
    41	  unsigned int  id;
    42	  unsigned char dept;
    43	  bool          married;
    44	} Emp; /* on a straight count, 131 bytes */
    45	
    46	void set_name(char* target, char* source) {
    47	  if (strlen(source) > MaxName) return;
    48	  strcpy(target, source);
    49	}
    50	
    51	void set_id(unsigned int* id_ptr) {
    52	  *id_ptr = rand();
    53	}
    54	
    55	void set_dept(unsigned char* dept_ptr, unsigned char code) {
    56	  *dept_ptr = code;
    57	}
    58	void set_married(unsigned int* married, unsigned int status) {
    59	  *married = status;
    60	}
    61	
    62	/* safest */
    63	void to_string(Emp* this, char* buffer) {
    64	  unsigned char temp[32];
    65	
    66	  printf("\n** Employee information **");
    67	  
    68	  strcpy(buffer, "");
    69	
    70	  strcat(buffer, "\nLast name:   "); /* strncat is even safer */
    71	  strcat(buffer, this->lname);
    72	  strcat(buffer, "\nFirst name:  ");
    73	  strcat(buffer, this->fname);  
    74	
    75	  sprintf(temp, "%i", this->id);
    76	  strcat(buffer, "\nEmployee id: ");
    77	  strcat(buffer, temp);
    78	
    79	  sprintf(temp, "%c", this->dept);
    80	  strcat(buffer, "\nDepartment:  ");
    81	  strcat(buffer, temp);
    82	
    83	  strcat(buffer, "\nMarried?:    ");
    84	  if (this->married) 
    85	    strcat(buffer, "yes");
    86	  else
    87	    strcat(buffer, "no");
    88	}
    89	
    90	/* ok */
    91	unsigned char* to_string2(Emp* this) {
    92	  unsigned char temp[256];
    93	
    94	  char* buffer = malloc(256);
    95	
    96	  printf("\n** Employee information **");
    97	  
    98	  strcpy(buffer, "");
    99	
   100	  strcat(buffer, "\nLast name:   "); 
   101	  strcat(buffer, this->lname);
   102	  strcat(buffer, "\nFirst name:  ");
   103	  strcat(buffer, this->fname);  
   104	
   105	  sprintf(temp, "%i", this->id);
   106	  strcat(buffer, "\nEmployee id: ");
   107	  strcat(buffer, temp);
   108	
   109	  sprintf(temp, "%c", this->dept);
   110	  strcat(buffer, "\nDepartment:  ");
   111	  strcat(buffer, temp);
   112	
   113	  strcat(buffer, "\nMarried?:    ");
   114	  if (this->married) 
   115	    strcat(buffer, "yes");
   116	  else
   117	    strcat(buffer, "no");
   118	  return buffer;
   119	}
   120	
   121	
   122	/* Disaster: never do this! (gcc compiler issues warning.) */
   123	unsigned char* to_string3(Emp* this) {
   124	  unsigned char buffer[256];
   125	  unsigned char temp[32];
   126	
   127	  printf("\n** Employee information **");
   128	  
   129	  strcpy(buffer, "");
   130	
   131	  strcat(buffer, "\nLast name:   "); 
   132	  strcat(buffer, this->lname);
   133	  strcat(buffer, "\nFirst name:  ");
   134	  strcat(buffer, this->fname);  
   135	
   136	  sprintf(temp, "%i", this->id);
   137	  strcat(buffer, "\nEmployee id: ");
   138	  strcat(buffer, temp);
   139	
   140	  sprintf(temp, "%c", this->dept);
   141	  strcat(buffer, "\nDepartment:  ");
   142	  strcat(buffer, temp);
   143	
   144	  strcat(buffer, "\nMarried?:    ");
   145	  if (this->married) 
   146	    strcat(buffer, "yes");
   147	  else
   148	    strcat(buffer, "no");
   149	
   150	  return buffer;
   151	}
   152	
   153	void dump_addresses(Emp* emp) {
   154	  printf("Address of Emp:     %p (%u)\n", emp, emp);
   155	  printf("Address of lname:   %p (%u)\n", emp->lname, emp->lname);
   156	  printf("Address of fname:   %p (%u)\n", emp->fname, emp->fname);
   157	  printf("Address of id:      %p (%u)\n", &emp->id, &emp->id);
   158	  printf("Address of dept:    %p (%u)\n", &emp->dept, &emp->dept);
   159	  printf("Address of married: %p (%u)\n", &emp->married, &emp->married);
   160	}
   161	
   162	int main() {
   163	  /* Seed the pseudo-random number generator with the current time. 
   164	     An Emp's id is set to a pseudo-random number. */
   165	  srand(time(0)); 
   166	
   167	  Emp fred;
   168	  /* sizeof(fred) also would work. */
   169	  printf("sizeof(Emp) is %i\n", sizeof(Emp)); /* 136 on my system */
   170	
   171	  dump_addresses(&fred);
   172	  /* on my system:
   173	
   174	     Address of Emp:     0xbff7b1a0 (3220681120)
   175	     Address of lname:   0xbff7b1a0 (3220681120)
   176	     Address of fname:   0xbff7b1dd (3220681181)
   177	     Address of id:      0xbff7b21c (3220681244)
   178	     Address of dept:    0xbff7b220 (3220681248)
   179	     Address of married: 0xbff7b224 (3220681252)
   180	  */
   181	
   182	  /* Give fred's properties some values */
   183	  set_name(fred.lname, "Flintstone");
   184	  set_name(fred.fname, "Fred");
   185	  set_id(&fred.id);
   186	
   187	  set_dept(&fred.dept, 'Z');
   188	  set_married(&fred.married, true);
   189	
   190	  /* preferred to_string */
   191	  unsigned char buffer[256];
   192	  to_string(&fred, buffer);
   193	  printf("%s\n", buffer);
   194	  /* output:
   195	
   196	      ** Employee information **
   197	      Last name:   Flintstone
   198	      First name:  Fred
   199	      Employee id: 2084589247
   200	      Department:  Z
   201	      Married?:    yes 
   202	  */
   203	
   204	  /* to_string2: same output as above */
   205	  unsigned char* ptr = to_string2(&fred);
   206	  printf("%s\n", ptr);
   207	  free(ptr);  /* critical */
   208	
   209	  /* to_string3: if it doesn't crash, it's pure luck.
   210	     (In this case, it's because nothing is called 
   211	     after to_string3.)
   212	  */
   213	  printf("%s\n", to_string3(&fred));
   214	  
   215	  return 0;
   216	}
   217	
   218	## ragged arrays
   219	
   220	#include <stdio.h>
   221	
   222	#define Size1 (4)
   223	#define Size2 (3)
   224	#define Size3 (5)
   225	
   226	int main() {
   227	  int* a1 = malloc(4 * sizeof(int));
   228	  int* a2 = malloc(3 * sizeof(int));
   229	  int* a3 = malloc(5 * sizeof(int));
   230	  a1[0] = 1; a1[1] = 2; a1[2] = 3; a1[3] = 4;
   231	  a2[0] = 9; a2[1] = 8; a2[3] = 7;
   232	  a3[0] = -1; a3[1] = -2; a3[2] = -3; a3[3] = -4; a3[4] = -5;
   233	
   234	  int sizes[ ] = {Size1, Size2, Size3, 0};
   235	
   236	  int** ptr2ptr = malloc(sizeof(int*) * 4);
   237	  ptr2ptr[0] = a1;
   238	  ptr2ptr[1] = a2;
   239	  ptr2ptr[2] = a3;
   240	  ptr2ptr[3] = 0;
   241	
   242	  int i = 0;
   243	  while (ptr2ptr[i]) {
   244	    int j;
   245	    for (j = 0; j < sizes[i]; j++)
   246	      printf("%i ", ptr2ptr[i][j]);
   247	    printf("\n");
   248	    i++;
   249	  }
   250	  return 0;
   251	}
   252	;;;;
   253	
   254	/* file: sum.c */
   255	int accumulator = 0;
   256	
   257	int sum(int n1, int n2) {
   258	  int t = n1 + n2;
   259	  accumulator += t;
   260	  return t;
   261	}
   262	/*
   263	  At the command prompt:  gcc -02 -S sum.c
   264	     -02 ==> level 2 optimization
   265	     -S  ==> generate assembly code file sum.s, shown below
   266	
   267	 	.file	"sum.c"
   268	.globl accumulator
   269		.bss
   270		.align 4
   271		.type	accumulator, @object
   272		.size	accumulator, 4
   273	accumulator:
   274		.zero	4
   275		.text
   276		.p2align 2,,3
   277	.globl sum
   278		.type	sum, @function
   279	sum:
   280		pushl	%ebp
   281		movl	%esp, %ebp
   282		movl	12(%ebp), %eax
   283		addl	8(%ebp), %eax
   284		addl	%eax, accumulator
   285		leave
   286		ret
   287		.size	sum, .-sum
   288		.section	.note.GNU-stack,"",@progbits
   289		.ident	"GCC: (GNU) 4.1.1 20111201"
   290	;;;;
   291	
   292	  Again at the command prompt, on my Linux box:
   293	
   294	          gcc -02 -c sum.c    ;; produces sum.o
   295	
   296	          objdump -d sum.o    ;; produces what's shown below
   297	                              ;; (stuff that starts with _ is an annotation)
   298	
   299	sum.o:     file format elf32-i386
   300	
   301	
   302	Disassembly of section .text:
   303	
   304	_offset _bytes                 _equivalent in assembly
   305	
   306	00000000 <sum>:
   307	   0:   55                      push   %ebp
   308	   1:   89 e5                   mov    %esp,%ebp
   309	   3:   8b 45 0c                mov    0xc(%ebp),%eax
   310	   6:   03 45 08                add    0x8(%ebp),%eax
   311	   9:   01 05 00 00 00 00       add    %eax,0x0
   312	   f:   c9                      leave
   313	  10:   c3                      ret
   314	
   315	   Explanation: 
   316	
   317	   The _offsets are from the start of the file.
   318	
   319	   The _bytes are the byte sequence, broken into seven groupings, each grouping 
   320	   is an instruction. An IA32 instruction can be from 1 to 15 byes in size.
   321	   
   322	   The _equivalent column is the equivalent assembly instruction to the byte code.
   323	
   324	*/
   325	;;;;
   326	
   327	/* system-level I/O */
   328	
   329	#include <unistd.h>
   330	#include <sys/types.h>
   331	#include <sys/stat.h>
   332	#include <fcntl.h>
   333	#include <stdio.h>
   334	
   335	#define FILE_NAME "nums.bin"
   336	
   337	void report_and_die(const char* msg) {
   338	  fprintf(stderr, msg);
   339	  exit(-1);
   340	}
   341	
   342	int main() {
   343	  const int bad_io = 0xffffffff;
   344	  char error_msg[512];
   345	
   346	  int file_descriptor = open(FILE_NAME,         /* name */
   347				     O_CREAT | O_RDWR,  /* create for read/write */
   348				     0);                /* permissions */
   349	
   350	  if (file_descriptor == bad_io) {
   351	    sprintf(error_msg, "Couldn't open file %s.\n", FILE_NAME);
   352	    report_and_die(error_msg);
   353	  }
   354	
   355	  /* Write some data. */
   356	  int n[ ] = { 9, 7, 5, 3, 1 };
   357	  int read_in[5 * sizeof(int)];
   358	
   359	
   360	
   361	
   362	  int flag = write(file_descriptor, n, sizeof(n));
   363	  if (flag == bad_io) {
   364	    sprintf(error_msg, "Couldn't write to file %s.\n", FILE_NAME);
   365	    report_and_die(error_msg);
   366	  }
   367	  
   368	  flag = close(file_descriptor);
   369	  if (flag == bad_io) {
   370	    sprintf(error_msg, "Couldn't close file %s.\n", FILE_NAME);
   371	    report_and_die(error_msg);
   372	  }
   373	  
   374	  ssize_t in_flag = read(file_descriptor, read_in, sizeof(read_in));
   375	  
   376	  if (in_flag == bad_io) {
   377	    sprintf(error_msg, "Couldn't read from file %s.\n", FILE_NAME);
   378	    report_and_die(error_msg);
   379	  }
   380	
   381	  file_descriptor = open(FILE_NAME, O_RDONLY, 0);
   382	  if (file_descriptor == bad_io) {
   383	    sprintf(error_msg, "Couldn't open file %s for reading.\n", FILE_NAME);
   384	    report_and_die(error_msg);
   385	  }
   386	
   387	  flag = read(file_descriptor, read_in, sizeof(read_in));
   388	 
   389	  return 0;
   390	}
   391	;;;;
   392	
   393	
