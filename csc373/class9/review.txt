     1	
     2	int main() {              
     3	    /* ... */
     4	    no_op(777, 333);
     5	    /* ... */                  +===========+
     6	    return 0;                  |           |<=== main's %ebp, <=== %ebp (c)
     7	}                              +-----------+
     8	                                   ...       
     9	                               +-----------+
    10	void no_op(int a, int b) {     |    333    | ;; call to no_op(..., 333) 
    11	    int y = 5;                 +-----------+ 
    12	    int z = 9;                 |    777    | ;; call to no_op(777, ...)
    13	    y += b;                    +--- -------+
    14	    z += a;                    |main's %eip| ;; call to no_op, <=== %esp (c)     
    15	    return;                    +===========+
    16	}                              |main's %ebp|<=== no_op's %ebp & %esp (1),(2), (c)
    17	                               +-----------+
    18	                               | 5, 338    | -4(%ebp) (4), (8)
    19	                               +-----------+
    20	                               | 9, 876    |<=== %esp (3), (b)
    21	                               +-----------+
    22	                                               
    23	         +-------------+                       +--------------------+
    24	         | 333, 777    | (6), (9)              | ptr to 5, ptr to 9 | (7), (a)
    25	         +-------------+                       +--------------------+
    26	            %edx                                      %eax
    27	
    28	_no_op:
    29	
    30	 pushl %ebp (1)            ;; save the base pointer (call frame pointer) from
    31	                           ;; the caller, that is, the function that calls no_op
    32	                      
    33	 movl %esp, %ebp (2)       ;; create a new call frame by setting %ebp to TOP
    34	 
    35	 subl $8, %esp (3)         ;; move the stack pointer 8 bytes, which means the
    36	                           ;; new TOP is now 2 DWORDs from the pushed (saved) %ebp
    37	
    38	 movl $5, -4(%ebp) (4)     ;; store constant 5 one DWORD into the current call frame
    39	                           ;; in effect: y = 5
    40	
    41	 movl $9, -8(%ebp) (5)     ;; store constant 9 two DWORDs into the current call frame
    42	                           ;; in effect: z = 9
    43	
    44	 movl 12(%ebp), %edx (6)   ;; copy parameter b's value into %edx
    45	
    46	 leal -4(%ebp), %eax (7)   ;; copy y's location, at -4(%ebp), into %eax
    47	                           ;; in effect: %eax points to y
    48	
    49	 addl %edx, (%eax) (8)     ;; y += b: %edx holds b and (%eax) points to y, which
    50	                           ;; is 5; and y is stored at -4(%ebp)
    51	                           ;; The sum is stored where (%eax) points.
    52	
    53	 movl 8(%ebp), %edx (9)    ;; copy parameter a's value into %edx
    54	
    55	 leal -8(%ebp), %eax (a)   ;; copy z's location into %eax
    56	                           ;; in effect: %eax points to z
    57	
    58	 addl %edx, (%eax) (b)     ;; z += a: %edx holds a and (%eax) points to z
    59	                           ;; the sum is stored where %eax points
    60	
    61	 leave (c)       ;; restore the call frame pointer (%ebp) and the
    62	                 ;; stack pointer (%esp) to their values before the
    63	                 ;; call to no_op. In effect, leave is equivalent to
    64	                 ;;
    65	                 ;;  movl %ebp, %esp  ;; set TOP to start of this call frame
    66	                 ;;  popl %ebp        ;; restore the saved %ebp, thereby setting
    67	                                      ;; TOP to the end of the caller's 
    68	                                      ;; current call frame. Now new items
    69	                                      ;; can be added to the caller's stack frame
    70	
    71	 ret (d)         ;; return control to the caller of no_op
    72	                 ;; when the caller invoked 
    73	                 ;;
    74	                 ;;     call no_op
    75	                 ;;     <next instruction in caller>
    76	                 ;;
    77	                 ;; the call instruction pushes the address of the next 
    78	                 ;; caller instruction onto the stack. The ret instruction
    79	                 ;; pops this address off the stack so that the caller
    80	                 ;; now can resume execution.
    81	
    82	
