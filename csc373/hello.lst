     1                                  ;  hello.asm  a first program for nasm for Linux, Intel, gcc
     2                                  ;  (You'll need the NASM compiler if you want to run, which you
     3                                  ;  can get from the URL below:
     4                                  ;       http://sourceforge.net/project/showfiles.php?group_id=6208 
     5                                  ;
     6                                  ; assemble:	nasm -f elf -l hello.lst  hello.asm
     7                                  ; link:		gcc -o hiASM  hello.o
     8                                  ; run:	        hello 
     9                                  ; output is:	Hello World 
    10                                  
    11                                  	SECTION .data                      ; data section
    12 00000000 48656C6C6F2C20776F-     msg:	db "Hello, world! (from asm)",10   ; the string to print, 10 is CR
    13 00000009 726C6421202866726F-
    14 00000012 6D2061736D290A     
    15                                  len:	equ $-msg		           ; "$" means "here"
    16                                  				           ; len is a value, not an address
    17                                  
    18                                  	SECTION .text	                   ; code section
    19                                          global main	                   ; make label available to linker 
    20                                  main:			                   ; standard  gcc  entry point
    21                                  	
    22 00000000 BA19000000              	mov	edx,len	                   ; arg3, length of string to print
    23 00000005 B9[00000000]            	mov	ecx,msg	                   ; arg2, pointer to string
    24 0000000A BB01000000              	mov	ebx,1	                   ; arg1, where to write, screen
    25 0000000F B804000000              	mov	eax,4	                   ; write command to int 80 hex
    26 00000014 CD80                    	int	0x80	                   ; interrupt 80 hex, call kernel
    27                                  	
    28 00000016 BB00000000              	mov	ebx,0	                   ; exit code, 0 = normal
    29 0000001B B801000000              	mov	eax,1	                   ; exit command to kernel
    30 00000020 CD80                    	int	0x80	                   ; interrupt 80 hex, call kernel
