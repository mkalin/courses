
                                CSC373: Computer Systems 1
                                        Homework 4
Points: 100
Due:    Before midnight, July 16

1. Consider this code segment

         int n = 1234;
         float f = 1234.0f;

   Here's the internal representation of each in big endian, with the
   most significant byte to the left:

         n: 00 00 04 d2
   
         f: 44 9a 40 00

   Explain how the bits in the integer variable n and the floating-point variable
   f are correlated. It may be easiest to show how to derive f from n.

2. Consider this code segment:

         int n = 1234;
         float f = 1234.0f;
	 if (n == f) printf("They're equal.\n");
	 else printf("They're not equal.\n");

   When executed, the output is

         They're equal.

   What must the compiler be doing in order to reach this result? We know from 
   Question 1, by inspecting the hex values, that n and f differ at the bit level;
   and the equality operator ==, in this context, simply checks whether the bit
   patterns are the same.

3. Here's a short C program:

   /* This program uses the pow function, which is part of the run-time
        math library. To enable its use, this file (fpointHwk.c) was
        compiled/linked as follows:

             gcc -o fpointHwk -lm fpointHwk.c

        In "-lm", that's a lowercase L rather than a one.
     */

     #include <stdio.h>
     #include <math.h>

     int main() {
        /* first printf statements */
        double d1 = 1.0 / 10.0;
        printf("d1 == %f\n", d1);

        double d2 = pow(2.0, -20.0) * d1;
        printf("d2 == %f\n", d1);

 

        double d3 = 9.54 * pow(10.0, -8.0);
        printf("d3 == %f\n", d1);

        printf("\n");

        /* second printf statements */
        if (d1 == d2) printf("d1 == d2\n");
        else printf("d1 != d2\n");

        if (d1 == d3) printf("d1 == d3\n");
        else printf("d1 != d3\n");

        if (d2 == d3) printf("d2 == d3\n");
        else printf("d2 != d3\n");

        return 0;
     }

    Here's the output:

        d1 == 0.100000
        d2 == 0.100000
        d3 == 0.100000

        d1 != d2
        d1 != d3
        d2 != d3

    Explain what's going on. In particular, the first printf statements give the
    same value for d1, d2, and d3: 0.100000. However, the comparisons using ==
    all evaluate to false, as show in the second group of printf statements.
    Explain, then, why the system thinks that d1 != d2 and so on.








4. In the web_client.c program (included in sysIO.jar on the home site), 
   there's a call to gethostbyname, which takes a string and returns a
   pointer to a struct hostent. Here's a code segment to illustrate:

      struct hostent* host_ptr = gethostbyname("condor.depaul.edu");

   This pointer is passed to the function dump_host_aux, which prints 
   information about the host with the given name. In the case of
   www.yahoo.com, for instance, here's the output:

 









          Official name: www.yahoo.akadns.net
          Aliases: www.yahoo.com
          Host type: AF_INET
          Address length: 4
          Addresses: 68.142.197.86
                     68.142.197.87
                     68.142.197.90
                     68.142.197.67
                     68.142.197.69
                     68.142.197.75
                     68.142.197.77
                     68.142.197.84
 
   The structure itself looks like this:

     struct hostent {
        char*    h_name;       ;; official name
        char**   h_aliases;    ;; alias list
        int      h_addrtype;   ;; host address type 
        int      h_length;     ;; length of address 
        char**   h_addr_list;  ;; list of addresses 
     };


   Of interest here is the second field in the structure, h_aliases, which
   is a list of alternative names. (The official name for yahoo is not
   www.yahoo.com but rather www.yahoo.akadns.net; hence, www.yahoo.com is an
   alias for this official name.) Here's the loop that prints the aliases:


         printf("Aliases: ");
         int i = 0;
         while (host_ptr->h_aliases[i] != NULL) {
            printf("%.21s\n", host_ptr->h_aliases[i]);
            i++;
         }

   So the loop terminates when the ith entry is NULL, which is defined as 0
   in the header file stdlib.h. 

   Here's a simpler example of what's going on. The data type of strings
   is char**, that is, strings points to an array of strings. Note that the
   last entry in the list is NULL, which is 0. (Putting the integer 0 in there
   works the same.) If you put, say, -1 in place of NULL, you get a 
   compiler warning. Explain why the compiler is willing to accept an
   array initialization in which the last element is not a string, like the
   others, but rather an integer. 



 









         /* output from this program:

               foo
               bar
               baz
          */
          #include <stdlib.h>
          #include <stdio.h>

          int main() {
            char* strings[ ] = { "foo", "bar", "baz", NULL };
            int i = 0;
            while (strings[i] != NULL)
               printf("%s\n", strings[i++]);
            return 0;
          }


5. Here's a short program, echo.c, that prompts the user to enter a string 
   from the standard input and then echos the string back to the standard
   output:
       
      #include <stdio.h>
      #include <stdlib.h>

      char buffer[1024 + 1];

      char* prompt_and_read() {
         printf("\nPlease enter a string (-1 to exit): ");
         fgets(buffer, 1024, stdin);
         return buffer;
      }

      int main() {
         while (1) {
           char* ptr = prompt_and_read();
           int flag = atoi(ptr);    /* converts string to int */
           if (flag < 0) break;     /* break out of the loop */
           printf("You entered: %s\n", ptr);
         }
         return 0;
      }

   Note that array named buffer is not a local variable in 
   prompt_and_read but rather is defined outside of all functions.
   (In C jargon, buffer is an extern variable.) Why? In particular,
   what's the problem with defining buffer inside of prompt_and_read,
   as show here?

     char* prompt_and_read() {
         char buffer[1024 + 1];
         printf("\nPlease enter a string (-1 to exit): ");
         fgets(buffer, 1024, stdin);
         return buffer;
      }





6. Here is a C program. For review, the malloc function takes one argument,
   the number of bytes to allocate dynamically from the heap (as opposed to
   the stack) and returns a pointer to the first byte of allocated storage
   or NULL (0) if no storage can be allocated.

   The program compiles, runs, and generates output. Answer the questions
   below the program. (The code itself is in the ZIP file so you don't have
   to extract it from this handout.)


#include <stdio.h>

#define Size1 (4)
#define Size2 (3)
#define Size3 (5)

int main() {
  int* a1 = malloc(4 * sizeof(int));
  int* a2 = malloc(3 * sizeof(int));
  int* a3 = malloc(5 * sizeof(int));
  a1[0] = 1; a1[1] = 2; a1[2] = 3; a1[3] = 4;
  a2[0] = 9; a2[1] = 8; a2[3] = 7;
  a3[0] = -1; a3[1] = -2; a3[2] = -3; a3[3] = -4; a3[4] = -5;

  int sizes[ ] = {Size1, Size2, Size3, 0};

  int** ptr2ptr = malloc(sizeof(int*) * 4);
  ptr2ptr[0] = a1;
  ptr2ptr[1] = a2;
  ptr2ptr[2] = a3;
  ptr2ptr[3] = 0;

  int i = 0;
  while (ptr2ptr[i]) {
    int j;
    for (j = 0; j < sizes[i]; j++)
      printf("%i ", ptr2ptr[i][j]);
    printf("\n");
    i++;
  }
  return 0;
}

1. Draw a diagram that depicts the situation in storage after 
   a1, a2, a3, and ptr2ptr have been initialized.

2. Are a1, a2, and a3 of the same type? Explain as specifically as possible

3. Are a1 and ptr2ptr of the same type? Explain as specifically as possible.

4. If a1, a2, and a3 are considered to be arrays, are they of the same size?

5. If ptr2ptr is considered to be an array, is it the same size as any of
   a1, a2, or a3?

6. The while loop and the nested for loop terminate correctly. The
   for loop is basically a counted loop. Explain how it terminates.
   Explain what makes the while loop terminate.

