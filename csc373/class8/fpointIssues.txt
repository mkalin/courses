     1	#include <stdio.h>
     2	#include <float.h>
     3	#include <math.h>
     4	
     5	/* A site worth visiting for this material: http://babbage.cs.qc.edu/IEEE-754/Decimal.html */
     6	int main() {
     7	
     8	  /* 10.12 in decimal is .... */
     9	  printf("%0.50f\n", 10.12); /* 10.11999999999999921840299066388979554176330566406250 */
    10	
    11	  float a = 1.25;
    12	  float b = 0.06;	
    13	  float c = a * b;
    14	  float d = a + c;
    15	  printf("Expected answer is 1.33. Computed answer is %f.\n", d); /* Computed answer = 1.325000 */
    16	
    17	  
    18	  double d1 = 2.2, d2 = 1234.5678;
    19	  double d3 = d1 * d2;
    20	  
    21	  /* In my calculator: 2.2 * 1234.5678 = 2716.04916 */
    22	  if (2716.04916 == d3) 
    23	    printf("As expected.\n");
    24	  else 
    25	    printf("Nope, not as expected: %f\n", d3); /* Nope, not as expected: 2716.049160 */
    26	
    27	  /* Expected output: 10.1 
    28	
    29	    1.010000
    30	    2.020000
    31	    3.030000
    32	    4.040000
    33	    5.050000
    34	    6.060000
    35	    7.070001   ;; evident rounding now appears
    36	    8.080001
    37	    9.090001
    38	   10.100001
    39	  */
    40	  float num = 1.01f;
    41	  int i = 0;
    42	  while (i++ < 10) {
    43	    printf("%12f\n", num);
    44	    num += 1.01f;
    45	  }
    46	
    47	
    48	  /* In exact arithmetic, the left-hand sides of the comparisons are equal to 1; hence,
    49	     we'd expect the answers to be 0 (false). In fact, the answers are both 1 (true).
    50	  */
    51	  printf("((double)(1 / 103.0)) * 103.0 < 1.0 is %i.\n", ((double)(1 / 103.0)) * 103.0 < 1.0);
    52	  printf("((float)(1 / 103.0F)) * 103.0 > 1.0 is %i.\n", ((float) (1 / 103.0f)) * 103.0 > 1.0);
    53	
    54	  /* Expected value: $84.83 */
    55	  float price = 4.99f;
    56	  int quantity = 17;
    57	  float total = price * quantity;
    58	  printf("The total price is $%f.\n", total); /* The total price is $84.829994. */
    59	
    60	  /* Expected value: $90 */
    61	  int fullPrice = 100;
    62	  float discount = 0.1f;
    63	  int finalPrice = (int)(fullPrice * (1 - discount));
    64	  printf("The discounted price is $%i.\n", finalPrice); /* $89 */
    65	
    66	  /* two adjacent floats */
    67	  float expected = 10000.0f;
    68	  float result = +10000.000977f; /* The closest 4-byte float to 10,000 without being 10,000 */
    69	  float diff = fabs(result - expected); 
    70	
    71	  /* 10000.000000	10000.000977	0.000977 */
    72	  printf("%f\t%f\t%f\n", expected, result, diff); 
    73	
    74	  /* Note that the difference is 97.7 times the epsilon of 00001 */
    75	  if (fabs(result - expected) < 0.00001) printf("They differ.\n"); 
    76	  else printf("They don't differ enough.\n"); /* printed */
    77	  
    78	  /* This is the minimum positive floating point number of type float such that 
    79	     1.0 + FLT_EPSILON != 1.0 is true. Should be no greater than 1E-5.   
    80	  */
    81	  if (fabs(result - expected) < FLT_EPSILON) printf("They differ.\n"); 
    82	  else printf("They don't differ enough.\n"); /* printed */
    83	
    84	  if (fabs(result - expected) - 0.001 < FLT_EPSILON) printf("They differ.\n"); /* printed */
    85	  else printf("They don't differ enough.\n"); 
    86	  
    87	  return 0;
    88	}
    89	;;;;
    90	
    91	## High-level I/O
    92	#include <stdio.h>
    93	#include <stdlib.h>
    94	
    95	#define FileName "test.out"
    96	
    97	int main() {
    98	  FILE *fptr;
    99	  char  string[80];
   100	  int   n;
   101	
   102	  if((fptr = fopen(FileName, "w")) == 0) { 
   103	    printf("Can't open file.\n");
   104	    exit(-1);
   105	  }  
   106	  printf("Enter a string and a number: ");
   107	  fscanf(stdin, "%s%d", string, &n); /* read from keyboard */
   108	
   109	  fprintf(fptr, "%s %d", string, n); /* write to the file */
   110	  fclose(fptr); 
   111	
   112	  if((fptr = fopen(FileName, "r")) == 0) {
   113	    printf("Cannot open file.\n");
   114	    exit(-1);
   115	  }
   116	  fscanf(fptr, "%s%d", string, &n);      /* read from file */
   117	  fprintf(stdout, "%s %d\n", string, n); /* print to screen */
   118	  fclose(fptr);
   119	  return 0;
   120	}
   121	
