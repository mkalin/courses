                                  Hwk 2 Answers

Question 1:

 First, the short version of an answer:

 In the first qsort, we're qsorting an array of Emp elements. The sort is
 "destructive" in that the elements themselves are moved in the array (that's
 why I make a copy of the original way before sorting it). In the second
 qsort, pointers to Emp elements are sorted. On my system

       sizeof(Emp)  == 136
       sizeof(Emp*) ==   4

 In real life, an Emp would be considerably bigger; but, on a 32-bit machine,
 an Emp* would still be 4 bytes. Rule 1 in efficient programming is not to
 move data when you can move pointers to data. Basically, this is what a
 reasonable relational database does: the rows of a table (e.g., Employee table)
 are stored in arbitrary, unsorted order. Various indexes are then provided so
 that the table can be displayed in various sorted orders (by name, by ID, by
 salary, by department, etc.) A table index is, at the implementation level, an
 array of pointers to rows in the (data) table.

 Here's a sample documentation of the 2nd comparison function:

/* comp2 is used to sort an array of pointers; hence, comp2 receives
   from qsort pointers to two elements that qsort needs to compare.
   By requirement, the comp2 parameters must be of type

              const void*

   but, in reality, they are

              const Emp**

   or pointers to pointers to Emps. So the void* pointers are first
   cast to what they really are, Emp**.

   emp1 and emp2 are not pointers to Emps but pointers to pointers to
   Emps

           emp1--->some_ptr--->Emp

   so we dereference, say, emp1

           (*emp1)

   which gives us

           some_ptr

   which we then use to access the Emp to which some_ptr points. The syntax
   is
            (*emp1)->lname

   The parentheses are needed because -> is just as sticky as . and we want
   to dereference emp1 to get at the pointer that points to the Employee.

   The underlying comparison is the same as in comp1: create two
   strings, each last_name + first_name, and compare them in
   lexicographical order so that, for instance, "cruzandrea" precedes
   "cruzhenry".
*/
int comp2(const void* item1, const void* item2) {
  const Emp** emp1 = (const Emp**) item1;
  const Emp** emp2 = (const Emp**) item2;

  unsigned char buff1[BuffSize];
  unsigned char buff2[BuffSize];

  strcpy(buff1, (*emp1)->lname);
  strcat(buff1, (*emp1)->fname);
  strcpy(buff2, (*emp2)->lname);
  strcat(buff2, (*emp2)->fname);

  return strcmp(buff1, buff2);
}
;;;;;;;;;;;;

Question 2: There are many ways to do this. I'll illustrate two, one very
            conservative and one very aggressive. I've sketched the assembler,
            though this is not required.

 Conservative approach:

 Caller needs registers for a, b, and c. There are three "callee save" registers,
 which therefore fit the bill
                                          Assembler sketch
                                          ----------------
       Local variable a ==> %ebx      ;; movl $4, %ebx
       Local variable b ==> %edi      ;; movl $8, %edi
       Local variable c ==> %esi      ;; movl %eax, %esi (%eax has return value)
                                      ;; In the call to callee, %ebx and %edi would
                                      ;; be pushed onto the stack as arguments

 Callee has two parameters, n1 and n2, and also needs to compute the sum (n1 + n2),
 the product (n1 * n2), and the difference (temp - (n1 + n2)). On the face of it,
 then, callee needs 5 registers---but perhaps these can be shared.  Here's a possible 
 register allocation, using the "caller save" registers:

                                          Assembler sketch
                                          ----------------
           Parameter n1 ==> %edx      ;; popl into %edx
           Parameter n2 ==> %eax      ;; popl into %eax
             Copy of n2 ==> %ecx      ;; movl %eax, %ecx (need to save n2: see next)
                n1 + n2 ==> %eax      ;; addl %edx, %eax (%eax is 2nd source and dest.)
                n1 * n2 ==> %ecx      ;; mult %edx, %ecx (%ecx is 2nd source and dest.)
                                      ;;  (%ecx is the local variable temp)
       temp - (n1 + n2) ==> %eax      ;; sub %ecx, %eax (%eax is 2nd source and dest)

             
 Aggressive approach: An aggressive compiler could optimize away the call to callee 
                      and instead do the entire computation in caller. Further, it's
                      possible to use only the "callee save" registers under an
                      assumption given below. If the assumption does not hold, then
                      a "caller save" register or the stack would have to be used.


                                          Assembler sketch
                                          ----------------
       Local variable a ==> %ebx      ;; movl $4, %ebx
       Local variable b ==> %edi      ;; movl $8, %edi
              Copy of b ==> %esi      ;; movl %edi, %esi
                  a + b ==> %edi      ;; addl %ebx, %edi (%edi is 2nd source and dest.)
                  a * b ==> %ebx      ;; mult %esi, %ebx (%ebx is 2nd source and dest.)
  c = (a * b) - (a + b) ==> %edi      ;; sub %ebx, %edi (%edi is 2nd source and dest.)
                                      ;; Key assumption: original value of a no longer
                                      ;; needed. If this value is still needed, can't
                                      ;; do it in the three "callee save" registers
                                      ;; but need another

  Finally, you could write a little C to call the function and then compile and
  disassemble to see what the compiler actually does.

/****************************************************************************************/

Question 3: Here's documentation that's adequate. More is always welcome, of course.
            The critical thing is the distinction between

                                  %eax

            and

                                  (%eax)

            They mean radically different things. The first involves
            "direct addressing" and means: 

                     The value in %eax

            The second involves "indirect addressing" and means:

                     The value at the location to which %eax points.


void no_op(int a, int b) {
    int y = 5;
    int z = 9; 
    y += b;
    z += a;
    return;
}

_no_op:
 pushl %ebp                ;; save the base pointer (call frame pointer) from
                           ;; the caller, that is, the function that calls no_op
                      
 movl %esp, %ebp           ;; create a new call frame by setting %ebp to TOP

 subl $8, %esp             ;; move the stack pointer 8 bytes, which means the
                           ;; new TOP is now 2 DWORDs from the pushed (saved) %ebp

 movl $5, -4(%ebp)         ;; store constant 5 one DWORD into the current call frame
                           ;; in effect: y = 5

 movl $9, -8(%ebp)         ;; store constant 9 two DWORDs into the current call frame
                           ;; in effect: z = 9

 movl 12(%ebp), %edx       ;; copy parameter b's value into %edx

 leal -4(%ebp), %eax       ;; copy y's location, at -4(%ebp), into %eax
                           ;; in effect: %eax points to y

 addl %edx, (%eax)         ;; y += b: %edx holds b and (%eax) points to y, which
                           ;; is 5; and y is stored at -4(%ebp)
                           ;; The sum is stored where (%eax) points.

 movl 8(%ebp), %edx        ;; copy parameter a's value into %edx

 leal -8(%ebp), %eax       ;; copy z's location into %eax
                           ;; in effect: %eax points to z

 addl %edx, (%eax)         ;; z += a: %edx holds a and (%eax) points to z
                           ;; the sum is stored where %eax points

 leave           ;; restore the call frame pointer (%ebp) and the
                 ;; stack pointer (%esp) to their values before the
                 ;; call to no_op. In effect, leave is equivalent to
                 ;;
                 ;;  movl %ebp, %esp  ;; set TOP to start of this call frame
                 ;;  popl %ebp        ;; restore the saved %ebp, thereby setting
                                      ;; TOP to the end of the caller's 
                                      ;; current call frame. Now new items
                                      ;; can be added to the caller's stack frame

 ret             ;; return control to the caller of no_op
                 ;; when the caller invoked 
                 ;;
                 ;;     call no_op
                 ;;     <next instruction in caller>
                 ;;
                 ;; the call instruction pushes the address of the next 
                 ;; caller instruction onto the stack. The ret instruction
                 ;; pops this address off the stack so that the caller
                 ;; now can resume execution. The register %eip (extended
                 ;; instruction pointer) is the PC (program counter), that
                 ;; is, a pointer to next instruction for the CPU to execute


 



