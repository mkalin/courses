-- Code1.txt: code examples, mostly in C with a little Perl to start

# binary.pl

sub to_binary {
    my $number = shift;

    # base case
    return $number if $number == 0 || $number == 1;

    # recursive case
    my $quotient = int($number / 2);
    my $remainder = $number % 2;
    my $binary_number = to_binary($quotient) . $remainder;
}

my $n = 37;
my $b = to_binary($n);
print "$n in decimal is $b in binary\n";

# Output:
#
# 37 in decimal is 100101 in binary
#
# Interpretation of output:
#
#  100101 is 37. 
#  37 is (2 * 18) + 1
#    18 is (2 * 9) + 0
#      9 is (2 * 4) + 1
#       4 is (2 * 2) + 0
#        2 is (2 * 1) + 0
#         1 is 1         1
# 
#  Now read the remainder bits at the end, bottom to top: 100101
#
#  Next we work in binary. Note that removing the rightmost
#  bit in a binary number divides the number by 2
#  just as removing the rightmost decimal numeral from a 
#  decimal number divides the number by 10. In the binary
#  case, the remainder is 0 or 1; in the decimal case, the
#  remainder is one of 0,1,...,8,9. For instance, take 37.
#  Remove the 7 (remainder) to get 3. 37 = 3 * 10 + 7.
#
#  Now do the same in binary. 37 in decimal is 100101 in binary.
#
#  Remove the rightmost bit, 1, to get
#  10010, which is 18 (37 = 18 * 2 + 1)
#
#  10010 is 18. Remove the rightmost bit, 0, to get
#  1001, which is 9 (2 * 9 + 0 = 18)
#
#  1001 is 9. Remove the rightmost bit, 1, to get
#  100, which is 4 (2 * 4 + 1 = 9)
#
#  100 is 4. Remove the rightmost bit, 0, to get
#  10, which is 2 (2 * 2 + 0 = 2)
# 
#  10 is 2. Remove the rightmost bit, 0, to get
#  1, which is 1. This is a base case: 1 in decimal is 1 in binary.

/* hello.c */
#include <stdio.h>

int main() {
  printf("Hello, world!\n");
  return 0;
}
/* end of file */


/* endian.c */
#include <stdio.h>

int main() {
  int n = 0xabcdef12;               /* 0x means "hex" */
  printf("n in decimal: %d\n", n);  /* -1,412,567,278 */

  printf("%p\n", &n); /* print n's address: 0xbffa1f74 */

  printf("n contains %d bytes.\n", sizeof(n)); /* n's size in bytes: 4 */

  /* store n's address in ptr but cast the address to that of
     a char (1 byte) rather than of an int (4 bytes) */
  unsigned char* ptr = (unsigned char*) &n;
  int i;

  /* Run onn an Intel machine, which is little endian */
  for (i = 0; i < sizeof(int); i++)
    printf("%.2x ", ptr[i]);        /* 12 ef cd ab */
  printf("\n");

  /* in "reverse" order */
  unsigned char* last = ptr + sizeof(int) - 1; 
  while (last >= ptr)               /* ab cd ef 12 */
    printf("%.2x ", *last--); 
  printf("\n");
  
  return 0;
}
/* end of file */




















/* convert.c */
#include <stdio.h>
/* Convert command-line arguments from decimal to hexidecimal */
/* Sample invocation: convert 26 -9 44 3 11 -15 */

int main(int argc, char* argv[]) {
  /* usage check */
  if (argc < 2) {
    printf("Invoke as: convert [one or more decimal integers]\n");
    return -1;  /* negative integer signals abnormal termination */
  }

  int i = 1;         /* 1 because argv[0] is the program's name */
  while (i < argc) { /* argc is the number of command-line arguments */
    int next;
    sscanf(argv[i++], "%d", &next);
    if (i == 2) printf("%d resides at address %u\n", next, &next);
    printf("Decimal: %d   Hex: %x\n", next, next);
  }

  /* Now print out 10 through 20 in decimal/hex and their negatives */
  for (i = 0; i <= 20; i++) {
    printf("Decimal: %d   Hex: %x\n", i, i);
    printf("Decimal: %d   Hex: %x\n", -i, -i);
  }

  /* Now subtract y from x assuming an underlying 2's complement 
     implementation of integers */
  int x = 7, y = 5;       /* x in binary is 0111 and y is 0101 */
  y = ~y;                 /* 1's complement of y is 1010 */
  y += 1;                 /* increment y: in binary, 1011 */
  printf("2's complemented y is %d\n", y);

  int ans = x + y;  /* x + y is 0111 + 1011 is 0010, 2 in decimal */
  printf("%d - %d is %d\n", x, y, ans); 

  /* Meaning of the phrase "2's complement":

       -x = 2**N - x if x != 0
            0        otherwise

     For instance, in a 5-bit binary system, the 2's complement
     representation of -2 would be

     2**5 = 32 - 2 = 30 = 11110 in binrary 
                        = -2 in 5-bit 2's complement */   

  /* Changing signs at the 2's complement level */
  printf("\n");
  int n = 7;   /* 00...111 */
  n = ~n;      /* 11...000 -- 1's complement == invert bits */
  n += 1;      /* 11...001 -- 2's complement == 1's complement + 1 */
  printf("n = 7; n = ~n; n += 1; ===> %d\n", n); /* -7 */
  n = ~n;      /* 00...110 */
  n += 1;      /* 00...111 */
  printf("Again ===> %d\n", n ); /* 7 */
  return 0;
}
/* end of convert.c */

/* finite.c */
#include <stdio.h>
#include <limits.h>

int main() {
  /* basic overflow example */
  printf("Largest signed int is %d (%x)\n", 
	 INT_MAX, INT_MAX);
  printf("Largest + 1 is       %d (%x)\n", 
	 INT_MAX + 1, INT_MAX + 1); /* generates compiler warning on overflow */
  printf("Smallest signed is   %d (%x)\n", 
	 INT_MIN, INT_MIN);         /* same as above */
  /* output:
  Largest signed int is 2147483647 (7fffffff)
  Largest + 1 is       -2147483648 (80000000)
  Smallest signed is   -2147483648 (80000000)
  */

  printf("Largest unsigned int is %u (%x)\n", 
	 UINT_MAX, UINT_MAX);
  printf("Largest unsigned + 1 is %u (%x)\n", 
	 UINT_MAX + 1, UINT_MAX + 1); /* generates compiler warning on overflow */
  printf("Largest signed int is   %d (%x)\n",
	 INT_MAX, INT_MAX);
  /* output:
  Largest unsigned int is 4294967295 (ffffffff)
  Largest unsigned + 1 is 0 (0)
  Largest signed int is   2147483647 (7fffffff)
  */

  printf("Largest unsigned is %u times as big as the largest signed.\n",
	 UINT_MAX / (unsigned) INT_MAX);
  /* Largest unsigned is 2 times as big as the largest signed. */

  /* multiplication via shifting and one addition */
  unsigned int n = 54321;
  unsigned int n_doubled = n << 1;
  printf("\nn      ==  %u\nn << 1 == %u\n", 
	 n, n_doubled);
  printf("n * 2  == %u\n", n * 2);
  /*
    n      ==  54321
    n << 1 == 108642
    n * 2  == 108642
  */

  printf("\n");
  unsigned int n_quadrupled = n << 2;
  printf("n * 4        == %u\n", n * 4);
  printf("n << 2       == %u\n", n_quadrupled);
  printf("n << 1 + n   == %u\n", n_doubled + n);
  printf("n * 3        == %u\n", n * 3);
  /*
    n * 4        == 217284
    n << 2       == 217284
    n << 1 + n   == 162963
    n * 3        == 162963
  */


  /* integer wrap up with "C puzzles" */
  printf("\n");
  int x = INT_MIN;  /* for a 32-bit int, -2,147,483,648. In binary,
		       10000000000000000000000000000000 */
  if (x >= 0 || ((2 * x) < 0)) printf("x >= OR 2 * x < 0\n");
  else printf("Ooops! 2 * x is %d\n", 2 * x);

  /* First, a brief review of sign changes in 2's complement */
  printf("\n");
  int t = -7;
  t = ~t;    /* 1's complement */
  t += 1;    /* 2's complement */
  printf("%t = ~t followed by t += 1 is %d\n", t); /* 7 */
  t = ~t;
  t += 1;
  printf("%t = ~t followed by t += 1 is %d\n", t); /* -7 */

  printf("\n");
  if (x > 0 || -x >= 0) printf("Just what I expected.\n");
  else printf("Ooops! Must not either x be > 0 or -x >= 0?\n");
  if (x == -x) printf("yes, for some x, x == -1\n");
  /* Recall that x is 1000...000. So the 1's complement is
     0111...111. Now add 1. */

  /* Work for any value of x? Why, assuming 32-bit int? */
  printf("\n");
  x = 31;
  if ((x & 7) != 7 || (x << 30) < 0)       /* 7 in binary is 0...111 */
    printf("x & 7 != 7 OR x << 30 < 0\n"); /* 31 is 0..11111 */
  else
    printf("Ooops!\n");

  return 0;
}
/* end of finite.c */


/* more_endian.c */
/** Excecuted on an Intel PC with Linux **/

#include <stdio.h>

void show_bytes(char*, unsigned char*, int);

int main() {

  int n;
  /* store address of n in ptr_to_n, which then "points to" n */
  unsigned char* ptr_to_n = (unsigned char*) &n;
 
  /* first, some small ints */
  n = 9;
  show_bytes("int", ptr_to_n, sizeof(int));      /* 09 00 00 00 */

  n = 17;                                        /* 11 00 00 00 */
  show_bytes("int", ptr_to_n, sizeof(int));




  /* 12,345 is 00110000 00111001 in binary and 3039 in hex */
  n = 12345;
  show_bytes("int", ptr_to_n, sizeof(int));       /* 39 30 00 00 */

  float f = 12345.0;
  ptr_to_n = (unsigned char*) &f;
  show_bytes("float", ptr_to_n, sizeof(float));   /* 00 e4 40 46 */

  double d = 12345.0;
  ptr_to_n = (unsigned char*) &d;
  show_bytes("double", ptr_to_n, sizeof(double)); /* 00 00 00 00 80 1c c8 40 */

  d = 3.1415;
  ptr_to_n = (unsigned char*) &d;
  show_bytes("double", ptr_to_n, sizeof(double)); /* 6f 12 83 c0 ca 21 09 40 */
  
  f = 3.1415;
  ptr_to_n = (unsigned char*) &f;
  show_bytes("float", ptr_to_n, sizeof(float));   /* 56 0e 49 40 */

  show_bytes("void*", (unsigned char*) &ptr_to_n, /* 2c 4b fc bf */
             sizeof(void*)); 

  return 0;
}

void show_bytes(char* msg, unsigned char* ptr, int how_many) {
  printf("%s\n", msg);
  int i;
  /* The 2nd argument to printf, ptr[i], could be rewritten in
     two ways:
                 i[ptr]
                 *ptr++

     Quick exercise: Why does the first work?

     Quick explanation of *ptr++: The ++ associates with ptr, not
       with *ptr; so ptr++ increments ptr by the sizeof of whatever
       ptr points to, which is a char == 8 bits. The * operator
       dereferences the pointer, that is, gets the value pointed to.
       So *ptr++ first gets the value to which ptr currently points
       and then increments ptr by one char (8 bits).                     
  */
  for (i = 0; i < how_many; i++) printf(" %.2x", ptr[i]);
  printf("\n");

}
/* end of endian.c */
/**************************************************************************/











/* nums.c */

#include <stdio.h>
#include <limits.h>

/* show_bytes is now defined above main so that the definition
   also counts as a declaration 
*/
void show_bytes(char* msg, unsigned char* ptr, int how_many) {
  printf("%s\n", msg);
  int i;
  for (i = 0; i < how_many; i++) printf(" %.2x", ptr[i]);
  printf("\n");
}

int left_right1(unsigned n) {
  return (int) ((n << 24) >> 24);
}

int left_right2(unsigned n) {
  return ((int) n << 24) >> 25;
}

int sum_ints(int array[ ], unsigned length) {
  int i; /* trouble starts here */
  int result = 0;
  
  if (length == 0) printf("0 - 1 in unsigned is %x\n", length - 1);
  if ((unsigned) 0 - (unsigned) 1 == UINT_MAX) printf("Yes!\n");
  /* 0 - 1 is 111...1111 */
  for (i = 0; i <= length - 1; i++)  /* length - 1 brings it home */
    result += array[i];
  return result;
}

int main() {
  /* dangers of mixed integer types */
  unsigned int n1 = 0;
  signed int n2 = -1;
  int n3 = (n1 > n2) ? n1 : n2;
  printf("%d\n", n3); /* -1 is printed */

  /* illustration of constants in limits.h and shifting */
  n1 = 1;          /* n1 is unsigned: 000...001 in binary  */
  int count = 0;  
  while (n1 < INT_MAX) {
    n1 = n1 << 1;  /* left shift one position */
    count++;
  }
  n1 = n1 >> 1;    /* why? */
  /* output is: After 30 1-bit left shifts, n1's value is 1073741824 */
  printf("After %d 1-bit left shifts, n1's value is %d\n", 
	 count - 1, n1);







  /* binary expansions of signed and unsigned types */
  int signed_num = -12345;
  unsigned int unsigned_num = 53191;
  show_bytes("signed int", (unsigned char*) &signed_num, /* c7 cf ff ff */
	     sizeof(int));
  show_bytes("unsigned", (unsigned char*) &unsigned_num, /* c7 cf 00 00 */
	     sizeof(unsigned));

  /* p. 63 in the book: key assumption is that sizeof(int) is 4 == 32 bits */
  printf("left_rigth1(127) => %d  left_right2(127) => %d\n", 
	 left_right1(127), left_right2(127));
  printf("left_right1(128) => %d  left_right2(128) => %d\n", 
	 left_right1(128), left_right2(128));
  printf("left_right1(255) => %d  left_right2(255) => %d\n", 
	 left_right1(255), left_right2(255));
  printf("left_right1(256) => %d  left_right2(256) => %d\n", 
	 left_right1(256), left_right2(256));

  /* more mixed type dangers */
  printf("\n");
  int a[ ] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  int sum_a = sum_ints(a, (unsigned) 10);
  printf("Sum of the ints in the array is: %d\n", sum_a);

  int b[0]; /* empty */
  int sum_b = sum_ints(b, (unsigned) 0); /* trouble ends here */

  return 0;
}
/* end of nums.c */
