                                  Hwk 2 Answers

Question 1:

 First, the short version of an answer:

 In the first qsort, we're qsorting an array of Emp elements. The sort is
 "destructive" in that the elements themselves are moved in the array (that's
 why I make a copy of the original way before sorting it). In the second
 qsort, pointers to Emp elements are sorted. On my system

       sizeof(Emp)  == 136
       sizeof(Emp*) ==   4

 In real life, an Emp would be considerably bigger; but, on a 32-bit machine,
 an Emp* would still be 4 bytes. Rule 1 in efficient programming is not to
 move data when you can move pointers to data. Basically, this is what a
 reasonable relational database does: the rows of a table (e.g., Employee table)
 are stored in arbitrary, unsorted order. Various indexes are then provided so
 that the table can be displayed in various sorted orders (by name, by ID, by
 salary, by department, etc.) A table index is, at the implementation level, an
 array of pointers to rows in the (data) table.

 Here's a sample documentation of the 2nd comparison function:

/* comp2 is used to sort an array of pointers; hence, comp2 receives
   from qsort pointers to two elements that qsort needs to compare.
   By requirement, the comp2 parameters must be of type

              const void*

   but, in reality, they are

              const Emp**

   or pointers to pointers to Emps. So the void* pointers are first
   cast to what they really are, Emp**.

   emp1 and emp2 are not pointers to Emps but pointers to pointers to
   Emps

           emp1--->some_ptr--->Emp

   so we dereference, say, emp1

           (*emp1)

   which gives us

           some_ptr

   which we then use to access the Emp to which some_ptr points. The syntax
   is
            (*emp1)->lname

   The parentheses are needed because -> is just as sticky as . and we want
   to dereference emp1 to get at the pointer that points to the Employee.

   The underlying comparison is the same as in comp1: create two
   strings, each last_name + first_name, and compare them in
   lexicographical order so that, for instance, "cruzandrea" precedes
   "cruzhenry".
*/
int comp2(const void* item1, const void* item2) {
  const Emp** emp1 = (const Emp**) item1;
  const Emp** emp2 = (const Emp**) item2;

  unsigned char buff1[BuffSize];
  unsigned char buff2[BuffSize];

  strcpy(buff1, (*emp1)->lname);
  strcat(buff1, (*emp1)->fname);
  strcpy(buff2, (*emp2)->lname);
  strcat(buff2, (*emp2)->fname);

  return strcmp(buff1, buff2);
}
;;;;;;;;;;;;

Question 2: There are many ways to do this. I'll illustrate two, one very
            conservative and one very aggressive. I've sketched the assembler,
            though this is not required.

 Conservative approach:

 Caller needs registers for a, b, and c. There are three "callee save" registers,
 which therefore fit the bill
                                          Assembler sketch
                                          ----------------
       Local variable a ==> %ebx      ;; movl $4, %ebx
       Local variable b ==> %edi      ;; movl $8, %edi
       Local variable c ==> %esi      ;; movl %eax, %esi (%eax has return value)
                                      ;; In the call to callee, %ebx and %edi would
                                      ;; be pushed onto the stack as arguments

 Callee has two parameters, n1 and n2, and also needs to compute the sum (n1 + n2),
 the product (n1 * n2), and the difference (temp - (n1 + n2)). On the face of it,
 then, callee needs 5 registers---but perhaps these can be shared.  Here's a possible 
 register allocation, using the "caller save" registers:

                                          Assembler sketch
                                          ----------------
           Parameter n1 ==> %edx      ;; popl into %edx
           Parameter n2 ==> %eax      ;; popl into %eax
             Copy of n2 ==> %ecx      ;; movl %eax, %ecx (need to save n2: see next)
                n1 + n2 ==> %eax      ;; addl %edx, %eax (%eax is 2nd source and dest.)
                n1 * n2 ==> %ecx      ;; mult %edx, %ecx (%ecx is 2nd source and dest.)
                                      ;;  (%ecx is the local variable temp)
       temp - (n1 + n2) ==> %eax      ;; sub %ecx, %eax (%eax is 2nd source and dest)

             
 Aggressive approach: An aggressive compiler could optimize away the call to callee 
                      and instead do the entire computation in caller. Further, it's
                      possible to use only the "callee save" registers under an
                      assumption given below. If the assumption does not hold, then
                      a "caller save" register or the stack would have to be used.


                                          Assembler sketch
                                          ----------------
       Local variable a ==> %ebx      ;; movl $4, %ebx
       Local variable b ==> %edi      ;; movl $8, %edi
              Copy of b ==> %esi      ;; movl %edi, %esi
                  a + b ==> %edi      ;; addl %ebx, %edi (%edi is 2nd source and dest.)
                  a * b ==> %ebx      ;; mult %esi, %ebx (%ebx is 2nd source and dest.)
  c = (a * b) - (a + b) ==> %edi      ;; sub %ebx, %edi (%edi is 2nd source and dest.)
                                      ;; Key assumption: original value of a no longer
                                      ;; needed. If this value is still needed, can't
                                      ;; do it in the three "callee save" registers
                                      ;; but need another

  Finally, you could write a little C to call the function and then compile and
  disassemble to see what the compiler actually does.

/****************************************************************************************/

Question 3: Here's documentation that's adequate. More is always welcome, of course.
            The critical thing is the distinction between

                                  %eax

            and

                                  (%eax)

            They mean radically different things. The first involves
            "direct addressing" and means: 

                     The value in %eax

            The second involves "indirect addressing" and means:

                     The value at the location to which %eax points.


void no_op(int a, int b) {
    int y = 5;
    int z = 9; 
    y += b;
    z += a;
    return;
}

_no_op:
 pushl %ebp                ;; save the base pointer (call frame pointer) from
                           ;; the caller, that is, the function that calls no_op
                      
 movl %esp, %ebp           ;; create a new call frame by setting %ebp to TOP

 subl $8, %esp             ;; move the stack pointer 8 bytes, which means the
                           ;; new TOP is now 2 DWORDs from the pushed (saved) %ebp

 movl $5, -4(%ebp)         ;; store constant 5 one DWORD into the current call frame
                           ;; in effect: y = 5

 movl $9, -8(%ebp)         ;; store constant 9 two DWORDs into the current call frame
                           ;; in effect: z = 9

 movl 12(%ebp), %edx       ;; copy parameter b's value into %edx

 leal -4(%ebp), %eax       ;; copy y's location, at -4(%ebp), into %eax
                           ;; in effect: %eax points to y

 addl %edx, (%eax)         ;; y += b: %edx holds b and (%eax) points to y, which
                           ;; is 5; and y is stored at -4(%ebp)
                           ;; The sum is stored where (%eax) points.

 movl 8(%ebp), %edx        ;; copy parameter a's value into %edx

 leal -8(%ebp), %eax       ;; copy z's location into %eax
                           ;; in effect: %eax points to z

 addl %edx, (%eax)         ;; z += a: %edx holds a and (%eax) points to z
                           ;; the sum is stored where %eax points

 leave           ;; restore the call frame pointer (%ebp) and the
                 ;; stack pointer (%esp) to their values before the
                 ;; call to no_op. In effect, leave is equivalent to
                 ;;
                 ;;  movl %ebp, %esp  ;; set TOP to start of this call frame
                 ;;  popl %ebp        ;; restore the saved %ebp, thereby setting
                                      ;; TOP to the end of the caller's 
                                      ;; current call frame. Now new items
                                      ;; can be added to the caller's stack frame

 ret             ;; return control to the caller of no_op
                 ;; when the caller invoked 
                 ;;
                 ;;     call no_op
                 ;;     <next instruction in caller>
                 ;;
                 ;; the call instruction pushes the address of the next 
                 ;; caller instruction onto the stack. The ret instruction
                 ;; pops this address off the stack so that the caller
                 ;; now can resume execution. The register %eip (extended
                 ;; instruction pointer) is the PC (program counter), that
                 ;; is, a pointer to next instruction for the CPU to execute


4. PushPop

Consider the following C program, which implements a simple stack in two ways:

#include <stdio.h>

#define Size (12)

char stack[Size];
int top1 = 0;
int top2 = -1;

void push1(char item) {
  if (top1 >= Size) return;

  /* push and then move top */
  stack[top1] = item;
  top1++;
}

void push2(char item) {
  if (top2 + 1 >= Size) return;

  /* move top and then push */
  top2++;
  stack[top2] = item;
}

char pop1() {
  if (top1 - 1 < 0) return '\0';

  /* move top and then pop */
  top1--;
  return stack[top1];
}

char pop2() {
  if (top2 - 1 < -1) return '\0';

  /* pop and then move top */
  char retval = stack[top2];
  top2--;
  return retval;
}

void dump_stack1() {
  char c;
  while ((c = pop1()) != '\0') printf("%c ", c);
  printf("\n");
}

void dump_stack2() {
  char c;
  while ((c = pop2()) != '\0') printf("%c ", c);
  printf("\n");
}

void clear_stack() {
  int i;
  for (i = 0; i < Size; i++) stack[i] = '\0';
}

int main() {
  char c = 'A';
  
  printf("1st approach:\n");
  int i = 0;
  while (i++ < Size) push1(c++);
  dump_stack1();

  clear_stack();

  printf("\n2nd approach:\n");
  c = 'A';
  i = 0;
  while (i++ < Size) push2(c++);
  dump_stack2();

  return 0;
}
/* output:

1st approach:
L K J I H G F E D C B A 

2nd approach:
L K J I H G F E D C B A 

*/
 
;;;;;;;;

In the first way, the TOP points to the next available slot on the stack. The push operation is

        -- insert the item at TOP
        -- move TOP to the next open position (in this case, increment top)

The corresponding pop operation is

        -- move TOP back to last insert position (in this case, decrement top)
        -- return the item at TOP 

The alternative push is

        -- move TOP to the next open position (in this case, increment top)
        -- insert the item at TOP

The alternative pop is

        -- get the item at TOP to return
        -- move TOP to the next item (in this case, decrement top)
        -- return the item

So PushPop is an experiment to determine which approach IA-32 takes on a 32-bit machine.
Here's a documented version of the assembler:

int push_test() {
  int ret_val;
  /* movl %esp, %eax    ;; save stack pointer
     pushl %esp         ;; push stack pointer: original value or decremented?
     popl %edx          ;; pop the top value back into %edx
     subl %edx, %eax    ;; subtract the two values: 0 or 4 results
     movl %eax, ret_val ;; set up the return value
  */
  asm("movl %%esp, %%eax; pushl %%esp; popl %%edx; subl %%edx, %%eax; movl %%eax, %0"
      : "=r" (ret_val)
      : /* not input */
      : "%edx", "%eax");
  return ret_val;
}

The key issue is how the second statment

   pushl %esp 

works. In particular, does pushl first adjust %esp and then push? Or does pushl push and then adjust?
On an Intel box, "adjust" means "decrement," of course. In my C program, "adjust" means "add."

If pushl first decrements and then pushes, then value of %esp saved in %eax should differ from the
pushed version by 4 bytes. If pushl pushes and then decrements, the saved-in-%eax and the pushed
versions will be the same and the subtraction in the 4th line will yield zero. On my IA-32 box,
0 is returned. So pushl works like push1 in the C program above.

;;;;

The pop_test is similar. Here's a docmented version:

int pop_test() {
  int ret_val = 0xffffffff;
  /* pushl ret_val       ;; save ret_val on the stack
     movl %esp, %edx     ;; save the stack pointer
     popl %esp           ;; pop to the stack pointer: original value or incremented?
     movl %esp, ret_val  ;; set the popped value as the return value
     movl %edx, %esp     ;; restore original stack pointer
  */
  asm("pushl %1; movl %%esp, %%edx; popl %%esp; movl %%esp, %0; movl %%edx, %%esp"
      : "=r" (ret_val)
      : "r" (ret_val)
      : "%edx");
  return ret_val;
}

The action here starts with pushing -1, all 1s in binary and so a distinctive pattern, onto the stack.
The current stack pointer is saved only to restore it after the "experiment," which is done on the
last line of the ASM. This experiment is neutral about how the push works. We know, in any case, that
the push will move (that is, decrement) %esp. The question is about

    popl %esp 

Does popl first save the top-of-the-stack value in %esp and then adjust (that is, increment)? Or does
popl first adjust (increment) and then save? If it first saves, we should get something other than -1.
If it first adjusts, thereby pointing back at the pushed -1, we should get -1. On my IA-32 box, I get
-1. So popl is pop1 in my C program above (except that IA-32 increments %esp and I decrement top1).
Basically, popl is 

   movl (%esp), <some register or other> ;;  copy 
   addl $4, %esp




