                                  Hwk 2 Answers
Question 1:

Consider the change, that is, moving the variable state into main:

char* greeting_pieces[ ] = {"Hello", ",", " world", "!"};
/* int state = 4; */

int main() {
   int state = 4; /* this is now a local variable: all else is the same */
   /* ... */
}

If the extern variable named state were placed inside main, the variable would thereby
become auto; and each call to main would have its own distinct copy, each with a value of
4. None of these variables would ever have a value of 0, which is required to end the
recursive calls; hence, the recursive calls would go on and on until the system intervened to 
abort the process.

The program would blow up in any case but the error message might vary across systems. 
Basically, you'd have "infinite recursion": all calls and no returns until the system 
said "Enough!". Making state extern ensures that there is but one copy for the entire
process and not one copy per recursive call.
;;;;;;;;;;;;

Question 2: There are many ways to do this. I'll illustrate two, one very
            conservative and one very aggressive. The assembler from my
            machine may differ from what you get. I've also sketched the
            assembler in my answers, which is not required.

First, here's the assembler for my office machine:

	.file	"foo.c"
	.text
.globl callee
	.type	callee, @function
callee:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$16, %esp
	movl	8(%ebp), %eax
	imull	12(%ebp), %eax
	movl	%eax, -4(%ebp)
	movl	12(%ebp), %eax
	movl	8(%ebp), %edx
	addl	%eax, %edx
	movl	-4(%ebp), %eax
	subl	%edx, %eax
	leave
	ret
	.size	callee, .-callee
.globl caller
	.type	caller, @function
caller:
	pushl	%ebp
	movl	%esp, %ebp
	subl	$24, %esp
	movl	$4, -4(%ebp)
	movl	$8, -8(%ebp)
	movl	-8(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-4(%ebp), %eax
	movl	%eax, (%esp)
	call	callee
	movl	%eax, -12(%ebp)
	leave
	ret
	.size	caller, .-caller
	.ident	"GCC: (Ubuntu 4.4.3-4ubuntu5) 4.4.3"
	.section	.note.GNU-stack,"",@progbits
;;;;

We can do better, as this code uses mostly the stack instead of registers;
indeed, only eax is used.


 Conservative approach:

 Caller needs registers for a, b, and c. There are three "callee save" registers,
 which therefore fit the bill
                                          Assembler sketch
                                          ----------------
       Local variable a ==> %ebx      ;; movl $4, %ebx
       Local variable b ==> %edi      ;; movl $8, %edi
       Local variable c ==> %esi      ;; movl %eax, %esi (%eax has return value)
                                      ;; In the call to callee, %ebx and %edi would
                                      ;; be pushed onto the stack as arguments

 Callee has two parameters, n1 and n2, and also needs to compute the sum (n1 + n2),
 the product (n1 * n2), and the difference (temp - (n1 + n2)). On the face of it,
 then, callee needs 5 registers---but perhaps these can be shared.  Here's a possible 
 register allocation, using the "caller save" registers:

                                          Assembler sketch
                                          ----------------
           Parameter n1 ==> %edx      ;; popl into %edx
           Parameter n2 ==> %eax      ;; popl into %eax
             Copy of n2 ==> %ecx      ;; movl %eax, %ecx (need to save n2: see next)
                n1 + n2 ==> %eax      ;; addl %edx, %eax (%eax is 2nd source and dest.)
                n1 * n2 ==> %ecx      ;; mult %edx, %ecx (%ecx is 2nd source and dest.)
                                      ;;  (%ecx is the local variable temp)
       temp - (n1 + n2) ==> %eax      ;; sub %ecx, %eax (%eax is 2nd source and dest)

             
 Aggressive approach: An aggressive compiler could optimize away the call to callee 
                      and instead do the entire computation in caller. Further, it's
                      possible to use only the "callee save" registers under an
                      assumption given below. If the assumption does not hold, then
                      a "caller save" register or the stack would have to be used.


                                          Assembler sketch
                                          ----------------
       Local variable a ==> %ebx      ;; movl $4, %ebx
       Local variable b ==> %edi      ;; movl $8, %edi
              Copy of b ==> %esi      ;; movl %edi, %esi
                  a + b ==> %edi      ;; addl %ebx, %edi (%edi is 2nd source and dest.)
                  a * b ==> %ebx      ;; mult %esi, %ebx (%ebx is 2nd source and dest.)
  c = (a * b) - (a + b) ==> %edi      ;; sub %ebx, %edi (%edi is 2nd source and dest.)
                                      ;; Key assumption: original value of variable a is no 
                                      ;; longer needed. If this value is still needed, we
                                      ;; can't do it in the three "callee save" registers
                                      ;; but need another one 


/****************************************************************************************/

Question 3: Here's documentation that's adequate. More is always welcome, of course.
            The critical thing is the distinction between

                                  %eax

            and

                                  (%eax)

            They mean radically different things. The first involves
            "direct addressing" and means: 

                     The value in %eax

            The second involves "indirect addressing" and means:

                     The value at the location to which %eax points.


void no_op(int a, int b) {
    int y = 5;
    int z = 9; 
    y += b;
    z += a;
    return;
}

_no_op:
 pushl %ebp                ;; save the base pointer (call frame pointer) from
                           ;; the caller, that is, the function that calls no_op
                      
 movl %esp, %ebp           ;; create a new call frame by setting %ebp to TOP

 subl $8, %esp             ;; move the stack pointer 8 bytes, which means the
                           ;; new TOP is now 2 DWORDs from the pushed (saved) %ebp

 movl $5, -4(%ebp)         ;; store constant 5 one DWORD into the current call frame
                           ;; in effect: y = 5

 movl $9, -8(%ebp)         ;; store constant 9 two DWORDs into the current call frame
                           ;; in effect: z = 9

 movl 12(%ebp), %edx       ;; copy parameter b's value into %edx

 leal -4(%ebp), %eax       ;; copy y's location, at -4(%ebp), into %eax
                           ;; in effect: %eax points to y

 addl %edx, (%eax)         ;; y += b: %edx holds b and (%eax) points to y, which
                           ;; is 5; and y is stored at -4(%ebp)
                           ;; The sum is stored where (%eax) points.

 movl 8(%ebp), %edx        ;; copy parameter a's value into %edx

 leal -8(%ebp), %eax       ;; copy z's location into %eax
                           ;; in effect: %eax points to z

 addl %edx, (%eax)         ;; z += a: %edx holds a and (%eax) points to z
                           ;; the sum is stored where %eax points

 leave           ;; restore the call frame pointer (%ebp) and the
                 ;; stack pointer (%esp) to their values before the
                 ;; call to no_op. The macro leave is equivalent to
                 ;;
                 ;;  movl %ebp, %esp  ;; set TOP to start of this call frame
                 ;;  popl %ebp        ;; restore the saved %ebp, thereby setting
                                      ;; TOP to the end of the caller's 
                                      ;; current call frame. Now new items
                                      ;; can be added to the caller's stack frame

 ret             ;; return control to the caller of no_op
                 ;; when the caller invoked 
                 ;;
                 ;;     call no_op
                 ;;     <next instruction in caller>
                 ;;
                 ;; the call instruction pushes the address of the next 
                 ;; caller instruction onto the stack. The ret instruction
                 ;; pops this address off the stack so that the caller
                 ;; now can resume execution. The register %eip (extended
                 ;; instruction pointer) is the PC (program counter), that
                 ;; is, a pointer to next instruction for the CPU to execute

;;;;

Question 4:

There are different ways to do this. Here's one that uses while loops,
although any non-nested loop would be fine:

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define Mod (100) /* limit numbers to small ones */

/* print the contents of a 3-dimensional int array */
void dump(int a[][2][3]) {
  int i, j, k;
  for (i = 0; i < 3; i++) {
    printf("\n");
    for (j = 0; j < 2; j++) {
      printf("\n");
      for (k = 0; k < 3; k++)
	printf("%i ", a[i][j][k]);
    }
  }	
  printf("\n");
}

int main() {
  /* If you want always to get the same numbers,
     comment out the next line.

     If you want different numbers each time,
     leave the next line as is.
  */
  srand(time(0)); /* seed the random number generator */

  int array3[3][2][3];
  int i, j, k;

  /* fill the 3-dimensional array with random numbers */
  for (i = 0; i < 3; i++)
    for (j = 0; j < 2; j++)
      for (k = 0; k < 3; k++)
	array3[i][j][k] = rand() % Mod;

  /* print out the array */
  dump(array3);

  /** Assignment answer **/
  /* treat as 1-dimensional */
  unsigned len = 3 * 2 * 3; /* sizes of each dimension given above */
  
  int* front = (int*) array3;
  int* back = front + len - 1; /* pointer arithmetic */
  
  int* p = front;
  printf("Front to back:\n");
  while (p <= back) printf("%i ", *p++);

  printf("\nBack to front:\n");
  p = back;
  while (p >= front) printf("%i ", *p--);
  printf("\n");
  
  return 0;
}
;;;;

Question 5:

Question 1: I'm assuming that, as in the provided example,

             ADD 100, 101, 105    ;; RAM[105] = RAM[100] + RAM[101]
     
that the last operand is the destination and that the first two are
the source operands.


 Address    Contents  Contents after instruction executes
 -------    --------  -----------------------------------
   100       -1 ==> 124 from (5)    
   101        2
   102      106 
   103       31
   104        4 ==>  106 from (2)
   105       56
   106      101
   107       18
   108      105
   109      102
   110        3 ==> (2 - 106) from (1) ==> +1 from (3) ==> 109 from (4)

  
 The instructions are numbered for reference

 (1) SUB @106, -2(104), 110  ;; 1st src is indirect, 2nd is displacement, 3rd is direct
                             ;; So the instruction is effectively
                             ;;
                             ;;  SUB $2, $106, 110 
                             ;;
                             ;; RAM 110 changes from 3 to 2 - 106

 (2) MOV 102, 104            ;; direct mode: copies contents of 102 to 104
                             ;; So RAM 104 changes from 4 to 106

 (3) ADD 110, 2(@102), 110   ;; source1 is direct, source2 is displacement with
                             ;; base address given in indirect mode, dest is direct
                             ;; So the instruction is effectively
                             ;;
                             ;;  ADD $-104, $105, 110
                             ;;
                             ;; because source1 (110) now holds 2 - 106 == -104
                             ;;         source2 is cell 108 (102 holds 106 and the
                             ;;           dispalcement is 2, giving 108)
                             ;;         destination is 110
                             ;; So the contents of 110 become +1.

 (4) SUB $110, 110, 110      ;; source1 is immediate, source2 is direct, dest is direct
                             ;; So the instruction is effectively
                             ;;
                             ;;  SUB $110, $1, 110
                             ;;
                             ;; So cell 110 now holds 110 - 1 = 109

 (5) ADD 6(101), -2(104), -4(104) ;; both sources and destination are displacement
                                  ;; So the instruction is effectively
                                  ;;
                                  ;;  ADD 107, 102, 100
                                  ;;  ADD $18, $106, 100
                                  ;;
                                  ;; So cell 100 now has 124 as its contents
 (6) HALT                         ;; no impact on RAM

 After the execution, we have:

 Address    Contents
 -------    --------
   100      124
   101        2
   102      106 
   103       31
   104      106
   105       56
   106      101
   107       18
   108      105
   109      102
   110      109
/************************************************************************************/

Problem 6

To ease the task, I added a dump function. Here's my revised code,
with the required comments added.

#include <stdio.h>
#include <time.h>
#include <stdlib.h>

#define SIZE (16)

/*
  This program can be compiled and executed in the usual way.
  The function main is documented but the function swap is not.
  Document swap in two ways:
   -- Explain what it does in general.
   -- Document each line within the for loop.

  Don't change any of my code but feel free to add any code that 
  you like.
 */
/*** Swap and reverse the contents of the two arrays:
       -- p1's contents go into p2, in reverse order 
       -- p2's contents go into p1, in reverse order
     In this implementation, the arrays must be of the
     same SIZE.
***/
void swap(int* p1, int* p2) {
  int i;
  for (i = 0; i < SIZE; i++) {
    int n = *p1;   /* save value to which p1 points */
    *p1 = *p2;     /* copy value to which p2 points to where p1 points */
    *p2 = n;       /* copy saved value, original *p1, to where p2 points */
    p1++;          /* move p1 forward */
    p2--;          /* move p2 backward */
  }
}

void dump(char* msg, int* a) {
  printf("%s\n", msg);
  int i;
  for (i = 0; i < SIZE; i++)
    printf(" %i", a[i]);
}

int main() {
  srand(time(0));
  int a1[SIZE];
  int a2[SIZE];
  int i;
  
  /* Populate arrays. */
  for (i = 0; i < SIZE; i++) {
    a1[i] = rand() % 100;
    a2[i] = rand() % 100;
  }
  dump("\na1 before:", a1);
  dump("\na2 before:", a2);
  /* Do a swap. */
  swap(a1, a2 + SIZE - 1);
  printf("\n");
  dump("\na1 after:", a1);
  dump("\na2 after:", a2);
  printf("\n");
  return 0;
}
;;;;

Here's the output from a sample run:

a1 before:
 90  3 48  3 31 10 41 64 95 38 96 88 35 29 43 39
a2 before:
 11 46 18 47 12 21 28 46  0 27 78 80 49 37 60 34

a1 after:
 34 60 37 49 80 78 27  0 46 28 21 12 47 18 46 11
a2 after:
 39 43 29 35 88 96 38 95 64 41 10 31  3 48  3 90

