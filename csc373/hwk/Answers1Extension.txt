 I believe this expression will always equal 0                      */
  /*                                                                    */
  /* I'm assuming 32 bit words for my explanation.  I'm also ignoring   */
  /* signed versus unsigned now - these influence how quantities are    */
  /* respresented on output, not how they function internally.          */
  /*                                                                    */
  /* The one's compliment of a number gives you 2^32 - 1 (all bits set  */
  /* to 1) minus the original number (the bits giving you the original  */
  /* get turned off).                                                   */
  /*                                                                    */
  /* The left side of the expression then becomes                       */
  /* (2^32-1)-n1 + (2^32-1)-n2 ----> 2*2^32 - 2 - (n1 + n2).            */
  /* The right becomes (2^32-1)-(n1 + n2) ----> 2^32 - 1 - (n1 + n2).   */
  /* Overflow drops the 2^32 terms                                      */
  /* leaving the left as    -2 - (n1 + n2)                              */
  /* and the right side as  -1 - (n1 + n2).                             */
  /*                                                                    */
  /* -1 != -2                                                           */
  /*                                                                    */
  /* The expression is always false.          
