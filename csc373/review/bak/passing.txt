     1	#include <stdio.h>
     2	#include <stdlib.h>
     3	#include <string.h>
     4	
     5	#define ArraySize  (10)
     6	#define HowMany    (12)
     7	#define MaxName    (120)
     8	#define MaxAddress (150)
     9	#define NL         printf("\n")
    10	
    11	typedef unsigned bool;
    12	enum {false, true};
    13	typedef struct {
    14	  char           lname[MaxName + 1];
    15	  char           fname[MaxName + 1];
    16	  char           address[MaxAddress + 1];
    17	  bool           married;
    18	  unsigned short age; 
    19	} Emp;
    20	
    21	/* pass by value: copy of address of array's 1st element */
    22	void dump_lname(char lname[]) {
    23	  NL;
    24	  printf("Last name is %s", lname);
    25	  NL;
    26	}
    27	
    28	/* pass by value: copy of address of Emp struct */
    29	void dump(Emp* emp) {
    30	  printf("First name: %s", emp->fname); NL;
    31	  printf("Last name:  %s", emp->lname); NL;
    32	  printf("Address:    %s", emp->address); NL;
    33	  printf("Married?    %s", (emp->married) ? "Yes" : "No"); NL;
    34	}
    35	
    36	void call_by_value_for_array_in_struct(Emp emp) {
    37	  strcpy(emp.lname, "FooBar");
    38	  dump_lname(emp.lname); /* Last name is FooBar */
    39	}
    40	
    41	int comp1(const void* p1, const void* p2) {
    42	  return *((const int*) p1) - *((const int*) p2); /* ascending */
    43	}
    44	
    45	int comp2(const void* p1, const void* p2) {
    46	  return **((const int**) p2) - **((const int**) p1);
    47	}
    48	
    49	void dump_array(int array[ ], unsigned n) {
    50	  NL;
    51	  unsigned i;
    52	  for (i = 0; i < n; i++) printf("%i ", array[i]);
    53	  NL;
    54	}
    55	void dump_ptrs(int* array[ ], unsigned n) {
    56	  NL;
    57	  unsigned i;
    58	  for (i = 0; i < n; i++) printf("%i ", *array[i]);
    59	  NL;
    60	}
    61	
    62	int main() {
    63	  /* Three aggregates of Emps, one on the stack, two on the heap 
    64	     The storage within all three structures is contiguous. 
    65	   */
    66	  Emp  emps1[HowMany];                         /* stack */
    67	  Emp* emps2 = malloc(HowMany * sizeof(Emp));  /* heap, uninitialized */
    68	  Emp* emps3 = calloc(HowMany,  sizeof(Emp));   /* heap, initialized */
    69	
    70	  /* Initialize one of each */
    71	  strcpy(emps1[0].lname, "Vanger");
    72	  strcpy(emps1[0].fname, "Martin");
    73	  strcpy(emps1[0].address, "1 Yellow Brick Road, HereOrThere, Somewhere");
    74	  emps1[0].married = false;
    75	  emps1[0].age = 47;
    76	
    77	  strcpy(emps2[0].lname, "Vanger");
    78	  strcpy(emps2[0].fname, "Martin");
    79	  strcpy(emps2[0].address, "1 Yellow Brick Road, HereOrThere, Somewhere");
    80	  emps2[0].married = false;
    81	  emps2[0].age = 47;
    82	
    83	  strcpy(emps3[0].lname, "Vanger");
    84	  strcpy(emps3[0].fname, "Martin");
    85	  strcpy(emps3[0].address, "1 Yellow Brick Road, HereOrThere, Somewhere");
    86	  emps3[0].married = false;
    87	  emps3[0].age = 47;
    88	
    89	  /* Dump each */
    90	  dump(&emps1[0]); NL; /* one way */
    91	  dump(emps2 + 0); NL; /* another way */
    92	  dump(emps3);     NL; /* same as the above */
    93	
    94	  dump_lname((emps3 + 1)->lname); /* safe because calloc initializes to zero */
    95	
    96	  /* call by value (copy) illustration */
    97	  call_by_value_for_array_in_struct(emps1[0]); /* Last name is FooBar */
    98	  dump_lname(emps1[0].lname);                  /* Last name is Vanger */
    99	
   100	  /* free the heap storage */
   101	  free(emps2);
   102	  free(emps3);
   103	
   104	  /* some ints */
   105	  int array[ ] = {2, 1, 5, 3, 4, 8, 7, 9, 6, 0};
   106	  int* ptrs[ArraySize];
   107	  
   108	  /* store addresses in ptrs */
   109	  int i;
   110	  for (i = 0; i < ArraySize; i++) ptrs[i] = array + i;
   111	
   112	  qsort(ptrs, ArraySize, sizeof(int*), comp2);
   113	  dump_array(array, ArraySize); /* 2 1 5 3 4 8 7 9 6 0 */
   114	  dump_ptrs(ptrs, ArraySize);   /* 9 8 7 6 5 4 3 2 1 0 */
   115	
   116	  dump_array(array, ArraySize); /* 2 1 5 3 4 8 7 9 6 0 */
   117	  qsort(array, ArraySize, sizeof(int), comp1);
   118	  dump_array(array, ArraySize); /* 0 1 2 3 4 5 6 7 8 9 */
   119	
   120	
   121	
   122	  /* tricky but powerful stuff */
   123	  int* nums = calloc(ArraySize, sizeof(int));
   124	  for (i = 0; i < ArraySize; i++) nums[i] = i + 1;
   125	  dump_array(nums, ArraySize); /* 1 2 3 4 5 6 7 8 9 10 */
   126	  nums = realloc(nums, 5);
   127	  if (!nums) 
   128	    fprintf(stderr, "%s", "realloc failed...\n");
   129	  else {
   130	    for (i = ArraySize; i < (ArraySize + 5); i++) nums[i] = i + 1;
   131	    dump_array(nums, ArraySize + 5); /* 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 */
   132	  }
   133	
   134	  return 0;
   135	}
   136	
